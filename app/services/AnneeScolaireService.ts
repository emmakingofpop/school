import { db } from '../../lib/firebase';
import {
  collection,
  addDoc,
  updateDoc,
  deleteDoc,
  getDoc,
  getDocs,
  doc,
  query,
  where,
} from 'firebase/firestore';

// D√©finition du type AnneeScolaire
export type AnneeScolaire = {
  annee: string;        // Ann√©e scolaire (ex: "2024-2025")
  id_admin: string;   // R√©f√©rence de l‚Äôadmin
};

const COLLECTION_NAME = 'annees_scolaires';

export const AnneeScolaireService = {
  // ‚ûï Ajouter une ann√©e scolaire
  add: async (data: AnneeScolaire): Promise<string | null> => {
    try {
      // V√©rifier si l‚Äôann√©e existe d√©j√†
      const q = query(
        collection(db, COLLECTION_NAME),
        where("annee", "==", data.annee)
      );

      const querySnapshot = await getDocs(q);

      if (!querySnapshot.empty) {
        console.warn("‚ö†Ô∏è Cette ann√©e scolaire existe d√©j√†.");
        return null; // ou querySnapshot.docs[0].id si tu veux renvoyer l‚Äôexistant
      }

      // Ajouter si pas de duplication
      const docRef = await addDoc(collection(db, COLLECTION_NAME), data);
      return docRef.id;
    } catch (error) {
      console.error("Erreur lors de l‚Äôajout de l‚Äôann√©e scolaire :", error);
      return null;
    }
  },

  // üîç R√©cup√©rer une ann√©e scolaire par ID
  getById: async (id: string): Promise<AnneeScolaire | null> => {
    try {
      const docRef = doc(db, COLLECTION_NAME, id);
      const docSnap = await getDoc(docRef);
      if (docSnap.exists()) {
        return docSnap.data() as AnneeScolaire;
      } else {
        return null;
      }
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l‚Äôann√©e scolaire :', error);
      return null;
    }
  },

  
    // üìã R√©cup√©rer toutes les AnneeScolaire d‚Äôun admin
    getAllByAdmin: async (
      id_admin: string
    ): Promise<(AnneeScolaire & { id: string })[]> => {
      try {
        const q = query(
          collection(db, COLLECTION_NAME),
          where('id_admin', '==', id_admin)
        );
  
        const querySnapshot = await getDocs(q);
        const anneeScolaire: (AnneeScolaire & { id: string })[] = [];
  
        querySnapshot.forEach((docSnap) => {
          anneeScolaire.push({ ...(docSnap.data() as AnneeScolaire), id: docSnap.id });
        });
  
        return anneeScolaire;
      } catch (error) {
       
        return [];
      }
    },

  // üìã R√©cup√©rer toutes les ann√©es scolaires
  getAll: async (): Promise<(AnneeScolaire & { id: string })[]> => {
    try {
      const querySnapshot = await getDocs(collection(db, COLLECTION_NAME));
      const annees: (AnneeScolaire & { id: string })[] = [];
      querySnapshot.forEach((docSnap) => {
        annees.push({ ...(docSnap.data() as AnneeScolaire), id: docSnap.id });
      });
      return annees;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des ann√©es scolaires :', error);
      return [];
    }
  },

  // ‚úèÔ∏è Mettre √† jour une ann√©e scolaire
  update: async (id: string, data: Partial<AnneeScolaire>): Promise<boolean> => {
    try {
      const docRef = doc(db, COLLECTION_NAME, id);
      await updateDoc(docRef, data);
      return true;
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de l‚Äôann√©e scolaire :', error);
      return false;
    }
  },

  // üóëÔ∏è Supprimer une ann√©e scolaire
  delete: async (id: string): Promise<boolean> => {
    try {
      const docRef = doc(db, COLLECTION_NAME, id);
      await deleteDoc(docRef);
      return true;
    } catch (error) {
      console.error('Erreur lors de la suppression de l‚Äôann√©e scolaire :', error);
      return false;
    }
  },
};
